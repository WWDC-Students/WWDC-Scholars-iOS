# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "1.81.0"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"

    sh('git init')
    sh('git config --global user.name "WWDCScholars-bot"')
    sh('git config --global user.email "wwdcscholars@logicbit.nl"')
    # ensure_git_status_clean
    increment_build_number

  end

  desc "Runs all the tests"
  lane :test do
    gym(scheme: "WWDCScholars")
    scan
  end

  desc "Deploy a new bleeding-edge version to Crashlytics beta"
  lane :crashlytics do
    match(git_url: "https://#{ENV['GH_TOKEN']}@github.com/WWDCScholars/certificates.git", type: "appstore", readonly: true)
    gym(scheme: "WWDCScholars")
    scan
    crashlytics
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :testflight do
    match(git_url: "https://#{ENV['GH_TOKEN']}@github.com/WWDCScholars/certificates.git", type: "appstore", readonly: true)
    gym(scheme: "WWDCScholars")
    scan
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :appstore do
    match(git_url: "https://#{ENV['GH_TOKEN']}@github.com/WWDCScholars/certificates.git", type: "appstore", readonly: true)
    snapshot
    gym(scheme: "WWDCScholars") # Build your app - more options available
    scan
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful
    version     = get_version_number(xcodeproj: "WWDCScholars.xcodeproj")
    build       = get_build_number(xcodeproj: "WWDCScholars.xcodeproj")

    commit_version_bump(
      message: "Version #{version}, Build #{build}\n[ci skip]"
    )
    # push_to_git_remote
    sh ('git push --quiet --mirror "https://$GH_TOKEN@github.com/WWDCScholars/WWDCScholars-iOS.git" > /dev/null 2>&1')
    slack(
      message: "Successfully deployed version *#{version}* (#{build})! :tim: :tada:"
    )
  end

  error do |lane, exception|
    slack(
      message: "Build failed! :sad-steve: " + exception.message,
      success: false
    )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer
